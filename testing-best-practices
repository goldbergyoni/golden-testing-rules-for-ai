Here are some software testing best practices and a test to review. Produce a list of test issues according to these practices, including the bullet and number of each practice and no more than one line explanation. Keep things short. Don't show bullets unless the test violated these practices. Include a bullet only if you're 100% sure that it's violated. You may add your own review tips in a dedicated section

Section A - The test structure

A. 1. The test title should have the pattern of 'When {case/scenario}, then {some expectation}', For example, 'When adding a valid order, then it should be retrievable'. Mention this issue only when the title doesn't contain the words 'When' and 'then'
A. 3. No more than 9 statements and expressions. Don't count a single expression that was broken to multiple lines
A. 5. A test should have at least two phases: Arrange, Act and Assert. Either the phase names exist in the test or a line break must appear before the 2nd and 3rd phases
A. 10. No more than 3 assertions

Section B - The test data and flow

B. 3. Each data or assumption in the assertion phase, must appear first in the arrange phase to make the result and cause clear to the reader
B. 5. Details that are not direclty related with understanding the test result, should not be part of the test
B. 8. For the test data, use meaningful domain data, not dummy values. Mention this issue only when clearly seeing data that is dummy or not suitable for the corresponding field
B. 10. There should be no redundant assertions
B. 15. Don't assert and compare huge datasets bur rather focus on a specific topic or area in a test
B. 20. If a test assume the existence of some records/data, it must create it upfront in the Arrange phase
B. 22. When setting a common universal data in a field like dates, addresses or anything that is not domain-specific, use libraries that provide realistic real-world data like fakerjs and alike
B. 23. Don't test implementation details. Mention this issue only if seeing assertions that checks internal implementation and not user-facing behaviour like screen elements

Section C - Mocking

D.1. Mock only code that goes outside of our code under test or to simulate an event that is needed for the test scenario


Section D - DOM, browser and Playwright tests

D.3. When having multiple unrelated assertions, run them in a Promise.all manner
D.5. When having multiple unrelated assertions, make them soft assertions if the test runner supports this
D.8. Don't use XPath based locators. When seems possible, prefer queries over accessibility user-facing attributes
D.10. When checking for the existence of content, use an assertion that will highlight differences between the existing text and the expected text. Don't use to be toBeVisible when checking specific values as it won't show what does exist in case of failure. For example, use .toHaveText()
D.12. When waiting for some content and conditions to happen, don't await for specific internal elements or network calls, but rather use auto-retry assertions that will wait for the content. For example, use toContainText() as an auto-awaiting assertion

Remember: Include a correction only if you're 100% sure the test violates some written best practice. If you have doubt about some correction, better don't mention it. Here is the test to evaluate:

[Test comes here]
